import socket
from struct import *

def concatenate_script(list_ur_commands):
    """
    Internal function that concatenates generated UR script into one large script file. Usually used to combine
    scripts generated by the GrasshopperPython components

    Args:
        list_ur_commands: A list of formatted UR Script strings

    Returns:
        ur_script: The concatenated script
    """

    ur_script = "\ndef my_script():\n"
    #ur_script += '\tpopup("running my_script")\n'

    combined_script = ""
    for ur_cmd in list_ur_commands:
        combined_script += ur_cmd

    #format combined script
    lines =  combined_script.split("\n")
    for l in lines:
        ur_script += "\t" + l + "\n"

    ur_script += 'end\n'
    ur_script += '\nmy_script()\n'
    return ur_script

def send_script(script_to_send,robot_ip):
    """
    Opens a socket to the Robot and sends a script

    Args:
        script_to_send: Script to send to socket
        robot_id: Integer. ID of robot

    """

    '''Function that opens a socket connection to the robot'''
    PORT = 30002
    HOST = robot_ip

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(2)
    try:
        s.connect((HOST, PORT))
    except:
        print ("Cannot connect to ",HOST,PORT)

    s.settimeout(None)
    max_size= 2<<18
    n=len(script_to_send)
    if n>max_size:
        raise Exception("Program too long")

    try:
        s.send(script_to_send)
    except:
        print("failed to send")
    s.close()

def listen_to_robot(robot_ip):
    PORT = 30003
    HOST = robot_ip
    # Create dictionary to store data
    chunks={}
    chunks["target_joints"] = []
    chunks["actual_joints"]= []
    chunks["forces"] = []
    chunks["pose"] = []
    chunks["time"] = [0]

    data = read(HOST, PORT)
    get_messages(data, chunks)
    return chunks
